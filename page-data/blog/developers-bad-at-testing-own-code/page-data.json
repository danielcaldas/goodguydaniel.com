{"componentChunkName":"component---src-lekoarts-gatsby-theme-minimal-blog-core-templates-post-query-tsx","path":"/blog/developers-bad-at-testing-own-code","result":{"data":{"post":{"__typename":"MdxPost","slug":"/blog/developers-bad-at-testing-own-code","title":"Why are developers bad at (manually) testing their code?","date":"06.04.2021","tags":[{"name":"Software Testing","slug":"software-testing"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Why are developers bad at (manually) testing their code?\",\n  \"subtitle\": \"Thoughts on software testing\",\n  \"date\": \"2021-04-06T00:00:00.000Z\",\n  \"slug\": \"/blog/developers-bad-at-testing-own-code\",\n  \"tags\": [\"Software Testing\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ScrollToTopButton, {\n    mdxType: \"ScrollToTopButton\"\n  }), mdx(\"p\", null, \"Manual testing of any software it's a vital activity to ensure its quality and long-term stability. Together with their coding activities, developers test their code changes to understand if they produce the desired outcome without breaking any existing software functionality. So far, so good.\"), mdx(\"p\", null, \"Today I'm writing a few points on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"why developers are bad at manual testing\"), \" their own code changes, especially at detecting unwanted side-effects in areas of the software often unrelated to the modified parts.\"), mdx(\"p\", null, \"I'm writing because, at this point in time, I have experienced two very different setups towards software testing:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"As a developer, I write a piece of code, and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"I'll have a dedicated tester\"), \" testing the product with my code change before my change is pushed to production.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"As a developer, I write a piece of code, and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"I'm alone responsible\"), \" for testing that code change before moving the change to production.\")), mdx(\"small\", null, mdx(\"i\", null, \"(both 1 and 2 follow standard code reviewing practices, but this is not relevant in this context)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Although slower, I believe that the 1st setup often results in much more stable software, and here are the reasons that back up my opinion.\")), mdx(\"h4\", {\n    \"id\": \"1-the-mental-bandwith-problem\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"1. The \\\"Mental Bandwith\\\" Problem\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#1-the-mental-bandwith-problem\",\n    \"aria-label\": \"1 the mental bandwith problem permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"Year after year, I'm more convinced that I'm \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"at my best when I focus on one task at a time. Also, the more specific\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the task, the better.\"), \" \", mdx(\"a\", {\n    href: \"https://sloanreview.mit.edu/article/the-impossibility-of-focusing-on-two-things-at-once/\",\n    target: \"_blank\",\n    title: \"The Impossibility of Focusing on Two Things at Once\"\n  }, \"Science backs up the fact\"), \" that it's\\nnaturally hard for humans to focus on two tasks of different nature simultaneously.\"), mdx(\"p\", null, \"Now, if you're developing and testing your own code, you'll be stretching yourself as an individual to do two very different\\ntasks in nature. You'll also be performing constant context switching because this is what happens when you're testing your\\ncode changes: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"Ok, let me check this case, and that case... Oh damn! Forgot to handle this in the code, should be just one\"), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"line, let me go back and add it... Alright! Back to testing where were we...\\\"\"), \". Of course, it always depends on how strict and\\norganized you can be, but overall, it is pretty hard to take your mind away from the underlying implementation \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you\"), \" did!\"), mdx(\"p\", null, \"As a developer testing my own code, I often tend to be as strict as possible in the sense that I'll avoid switching context until\\nI went through all the \\\"bullet points\\\" I wanted to cover. Nonetheless, because testing is also my responsibility, I'll probably dedicate\\nless energy to things such as refactoring the existing implementation, making it more readable, especially after I've manually tested\\nsomething thoroughly. Unit tests often give me a lot of confidence to do this, but that's not always the case. Some\\nfunctionalities (especially in the web platform) are tricky to capture in any form of automation.\"), mdx(\"h4\", {\n    \"id\": \"2-emotional-attachment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"2. Emotional Attachment\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#2-emotional-attachment\",\n    \"aria-label\": \"2 emotional attachment permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"It's good to be proud of the code we write. But more or less, every developer grows some kind of emotional attachment to the code they write\"), \", and\\nin my opinion, this attachment is proportional to the time you spend around a given task. It was not easy for me to assume\\nthis, but I had to stop at some point and don't be afraid to throw my code away if necessary. When developers test their code, they\\nunconsciously (or sometimes event consciously) cut corners and avoid specific scenarios because they are afraid that their beloved\\ncode would not make it. Suppose you have a tester trying out your change. In that case, you bring a second person to the table, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"person it's not emotionally invested in the code, so it's easier for them to tell you that something is wrong\"), \".\"), mdx(\"h4\", {\n    \"id\": \"3-the-big-picture\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"3. The Big Picture\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#3-the-big-picture\",\n    \"aria-label\": \"3 the big picture permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"By manually testing the code of dozens of developers you work with, you'll probably come across different functionalities, variants, and\\nshapes of that software as a tester. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The tester then develops a transversal knowledge of the software as opposed to developers' knowledge, which\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"is often vertical\"), \". Developers tend to work in specific verticals of a codebase, making them ignorant and continually less aware of what a given\\nchange means to the whole project. Thus \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I believe dedicated testers develop a more solid mental model of the software by constantly testing\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"changes and seeing the product evolve on its various fronts\"), \".\"), mdx(\"h4\", {\n    \"id\": \"4-role-specialization\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"4. Role Specialization\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#4-role-specialization\",\n    \"aria-label\": \"4 role specialization permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"Because testers allocate their efforts towards manual testing and other testing-related activities such as writing automation tests, they'll develop a more specialized set of skills appropriate for testing software. This involves:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Getting familiar with different tools to automate their flows.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Getting familiar with whatever technologies are employed to automate the testing process.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Getting a sense of community by gathering with other testers working on the same project and joining external communities to expand or share their expertise.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There are also developers that are particularly passitionate about this topic, why not let them go fulltime?\")), mdx(\"h4\", {\n    \"id\": \"5-a-fresher-pair-of-eyes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"5. A Fresher Pair of Eyes\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#5-a-fresher-pair-of-eyes\",\n    \"aria-label\": \"5 a fresher pair of eyes permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"An obvious statement. Often a fresher perspective brings value to the table. This doesn't apply only to software testing. Did it ever\\nhappen to you being stuck at something, stopping, going for a walk, coming back, and suddenly the problem is no longer there? Well, the\\nsame can happened if you get someone else help.\"), mdx(\"h4\", {\n    \"id\": \"6-the-my-code-is-bulletproof-attitude\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"6. The \\\"My code is bulletproof\\\" attitude\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#6-the-my-code-is-bulletproof-attitude\",\n    \"aria-label\": \"6 the my code is bulletproof attitude permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"There will be times when it's tempting to just push a change because you know such a simple code change \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"(the famous \\\"one-liner\\\") can't\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"possibly break something else totally unrelated\"), \". I was proven more than once that this is not true. Getting that tiny code change through a\\nstreamlined process of code review and manual testing (by a second individual), it's totally worth it because, again, the quality assurance engineer often\\nhas a broader understanding of the software from an end-user perspective. As a developer, I have to make sure I clearly communicate\\nthrough the proper channels (usually documentation in the Pull/Merge request) the intent of my change.\"), mdx(\"p\", null, \"See ya \\uD83D\\uDC4B\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Manual testing of any software it's a vital activity to ensure its quality and long-term stability. Together with their coding activities…","timeToRead":4,"banner":null,"parent":{"__typename":"Mdx","frontmatter":{"subtitle":"Thoughts on software testing"}}}},"pageContext":{"slug":"/blog/developers-bad-at-testing-own-code","formatString":"DD.MM.YYYY"}}}