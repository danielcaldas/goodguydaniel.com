{"componentChunkName":"component---src-lekoarts-gatsby-theme-minimal-blog-core-templates-post-query-tsx","path":"/blog/why-reactive-programming","result":{"data":{"post":{"__typename":"MdxPost","slug":"/blog/why-reactive-programming","title":"Why You Should Consider Reactive Programming","date":"23.07.2020","tags":[{"name":"JavaScript","slug":"java-script"},{"name":"Reactive Programming","slug":"reactive-programming"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Why You Should Consider Reactive Programming\",\n  \"subtitle\": \"Reactive Series - Part 1\",\n  \"date\": \"2020-07-23T00:00:00.000Z\",\n  \"slug\": \"/blog/why-reactive-programming\",\n  \"tags\": [\"JavaScript\", \"Reactive Programming\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ScrollToTopButton, {\n    mdxType: \"ScrollToTopButton\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Part 1 - Why You Should Consider Reactive Programming\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/reactive-programming-fundamentals\",\n    target: \"_blank\",\n    title: \"Fundamentals of Reactive Programming | goodguydaniel.com\"\n  }, \"Part 2 - Fundamentals of Reactive Programming\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/hands-on-reactive-programming-rxjs\",\n    target: \"_blank\",\n    title: \"Hands-on Reactive Programming with RxJS | goodguydaniel.com\"\n  }, \"Part 3 - Hands-on Reactive Programming with RxJS\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/reactive-rxjs-pros-cons\",\n    target: \"_blank\",\n    title: \"Reactive Programming: The Good and the Bad | goodguydaniel.com\"\n  }, \"Part 4 - Reactive Programming: The Good and the Bad\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/awesome-reactive\",\n    target: \"_blank\",\n    title: \"Awesome RxJS and Reactive Programming Resources | goodguydaniel.com\"\n  }, \"Part 5 - Awesome RxJS and Reactive Programming Resources\"))), mdx(\"hr\", null), mdx(\"p\", null, \"In the first part of my \", mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/series-reactive-programming-rxjs/\",\n    target: \"_blank\",\n    title: \"Reactive Series | goodguydaniel.com\"\n  }, \"series on Reactive Programming\"), \", I\\nwant to answer why you should consider Reactive Programming. My answer to this question is heavily based on my experience working on\\nbuilding complex user experiences that often deal with asynchronicity in the browser. I won't cover much on how Reactive\\nProgramming, would help your platforms scale by providing out of the box solutions to\\nhandle \", mdx(\"a\", {\n    href: \"https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7\",\n    target: \"_blank\",\n    title: \"Backpressure explained \\u2014 the resisted flow of data through software | by Jay Phelps | Medium\"\n  }, \"backpressure\"), \". Still, I\\nbelieve that the principles throughout this series can be extended to other ecosystems/platforms/programming languages.\"), mdx(\"h4\", {\n    \"id\": \"from-callbacks-to-asyncawait\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"From callbacks to async/await\", mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#from-callbacks-to-asyncawait\",\n    \"aria-label\": \"from callbacks to asyncawait permalink\",\n    \"className\": \"anchor after\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), mdx(\"p\", null, \"At first, \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Callback_(computer_programming)\",\n    target: \"_blank\",\n    title: \"Callback (computer programming) - Wikipedia\"\n  }, \"callbacks\"), \" were the primary\\nway for us to handle asynchronicity in JavaScript. Callbacks allow us to write code that is not yet ready to be executed because its parameters depend\\non the execution of some task(s) that will be complete in the future. Fastly we began to gain acquaintance\\nwith the \", mdx(\"a\", {\n    href: \"http://callbackhell.com/\",\n    target: \"_blank\",\n    title: \"Callback Hell\"\n  }, \"callback hell\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"doSomething(param1, param2, function(err, paramx) {\\n  doMore(paramx, function(err, result) {\\n    insertRow(result function(err) {\\n      yetAnotherOperation(someparameter, function(s) {\\n        somethingElse(function(x) {\\n          // ...\\n        });\\n      });\\n    });\\n  });\\n});\\n\")), mdx(\"p\", null, \"Somewhere down the road, jQuery 1.5 introduced \", mdx(\"a\", {\n    href: \"https://api.jquery.com/category/deferred-object/\",\n    target: \"_blank\",\n    title: \"Deferred Object | jQuery API Documentation\"\n  }, \"Deferred Objects\"), \" to\\nmanipulate callback queues and provide an alternative to manage asynchronicity. By this time, the concept of \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Futures_and_promises\",\n    target: \"_blank\",\n    title: \"Futures and promises - Wikipedia\"\n  }, \"Futures and Promises\"), \" was\\nnot new to computer science.\"), mdx(\"p\", null, \"It was not until \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\",\n    target: \"_blank\",\n    title: \"ECMAScript - Wikipedia\"\n  }, \"ECMAScript 2015\"), \" - The 6th edition, initially\\nknown as ECMAScript 6 (ES6) - that we got \", mdx(\"a\", {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\n    target: \"_blank\",\n    title: \"Promise - JavaScript | MDN\"\n  }, \"Promises\"), \" as\\na standard built-in object in the language. Before landing in ES6, Promises had already disrupted the JavaScript\\necosystem. Libraries such as \", mdx(\"a\", {\n    href: \"http://bluebirdjs.com/docs/getting-started.html\",\n    target: \"_blank\",\n    title: \"Getting Started | bluebird\"\n  }, \"bluebird\"), \", which\\nhas been around since 2013, have made it possible for JavaScript programmers to handle asynchronous code with Promises.\\nBut why Promises were such a game-changer? Mainly because they provide a higher abstraction on top of the callback pattern. With\\nPromises, you get a reference to an object that holds the resolution/failure of some future value. That reference\\nis chainable. You can easily return a Promise from a function and proceed with your program flow on the callee instead of propagating\\nthe chain of events down through the callback hell. Great!\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"function something() {\\n  return doSomething(param1, param2);\\n}\\n\\nfunction main() {\\n  something().then((err, paramx) => {\\n    // do stuff\\n  });\\n}\\n\")), mdx(\"p\", null, \"Again a new anti-pattern is born. We tend to attach to names emotionally, so the \\\"hell\\\" is back, but this\\ntime, instead of callback hell, we have the Promise hell.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"function something() {\\n  return doSomething(param1, param2);\\n}\\n\\nfunction main() {\\n  something().then((err, paramx) => {\\n    doMore(paramx).then((err, result) => {\\n      insertRow(result).then((err) => {\\n        // ...\\n      });\\n    });\\n  });\\n}\\n\")), mdx(\"p\", null, \"The thing with Promises is that they're also tempting to nest, resulting in extremely verbose code.\"), mdx(\"p\", null, \"In the \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/ECMAScript#7th_Edition_-_ECMAScript_2016\",\n    target: \"_blank\",\n    title: \"ECMAScript - Wikipedia\"\n  }, \"7th and 8th editions of ECMAScript\"), \", we\\nare given the \", mdx(\"a\", {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\",\n    target: \"_blank\",\n    title: \"async function - JavaScript | MDN\"\n  }, \"async function\"), \", a new\\nmechanism to battle the complex challenge that is asynchronicity. This time we have an even higher order of abstraction, where inside an\\nasync function, you can handle asynchronicity and making it look exactly like synchronous code. It seems a very promising\\nbreakthrough, and the community goes all in. Although \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"async functions are just syntactic sugar on top of Promises, they bring us\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"enormous advantages\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By replacing Promises with async functions, we no longer end up in the scenario where there are endless \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".then\"), \" chains\\nspread throughout the codebase.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generally, the code is cleaner. The flow of functions is more natural to read, even when it performs async work. The only\\ndifference we notice is the presence of the async keyword.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Triggering things conditionally becomes way more straightforward. Say two asynchronous tasks are co-dependent. To execute\\nthe request \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"B\"), \", we depend on data provided by request \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \". We can simply \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"await\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \", and with an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"if\"), \" statement\\nchecks, the data returned from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"A\"), \" to decide whether we need to trigger request \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"B\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Error handling seems to improve since one can use try/catch block to handle errors on rejected Promises, while\\nwith Promises, one needs to chain a catch and provide a callback to handle the error.\")), mdx(\"p\", null, \"After broad usage of async/await, the community started again, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"raising some cons on the construct\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Poorly explained syntax errors\"), \" (e.g., missing an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"await\"), \" keyword).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"promotes a less functional style\"), \" of coding, something that the JavaScript community has gained increasing excitement\\nover the past few years.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"opens the door to the design of less performant solutions\"), \" because it's just easy to drop an await to get something working\\nquickly but block the execution of other steps of the functions that, with a bit more effort, could be done in parallel. Other\\nanti-patterns such as iterating over a collection while performing an \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"async/await\"), \" task for each element, but this is\\nsomething one could quickly point out during code review.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transpiled output of async/await code is just something not pleasant to look at\"), \", much less to debug. Transpiled, because\\nif you're still supporting Internet Explorer, you're probably bundling polyfills for async/await.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The way synchronous code bridges over to async functions it's something yet confusing for me. It's something that it's not\\ntransparent. I found my self often jumping to the signature of the function I'm invoking to check whether it performs some asynchronous\\ntask or not. How could I lose track of something like that reading through some large codebase? Perhaps it's my fault I'm just\\nnot doing it right.\")), mdx(\"p\", null, \"I want to reinforce that we came to a long road since callbacks, and the enhancements are noticeable, but after some time, mentions\\nto the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"async/await hell\\\"\"), \" started to surface across the web.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"(async () => {\\n  const pizzaData = await getPizzaData(); // async call\\n  const drinkData = await getDrinkData(); // async call\\n  const chosenPizza = choosePizza(); // sync call\\n  const chosenDrink = chooseDrink(); // sync call\\n  await addPizzaToCart(chosenPizza); // async call\\n  await addDrinkToCart(chosenDrink); // async call\\n  orderItems(); // async call\\n})();\\n\")), mdx(\"small\", null, mdx(\"i\", null, \"example from:\", \" \", mdx(\"a\", {\n    href: \"https://medium.com/free-code-camp/avoiding-the-async-await-hell-c77a0fb71c4c\",\n    target: \"_blank\",\n    title: \"How to escape async/await hell. async/await freed us from callback\\u2026 | by Aditya Agarwal | freeCodeCamp.org | Medium\"\n  }, \"\\\"How to escape async/await hell\\\"\"))), mdx(\"p\", null, \"Generally speaking, something I learned over time, is that if a solution has many corner cases, requiring you to look into the\\ndocumentation (e.g., error handling in async/await VS Promises), it means that:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The solution's not intuitive enough.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By not being intuitive, it's not evolving in the same line of reasoning of the coder's mind.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"But what if everything is asynchronous? What if synchronous and asynchronous code looks the same?\"), \" I believe this is the best way\\nto shape our mindsets into producing highly readable and performant code. How would we achieve that? \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Observables, Reactive Programming\"), \".\"), mdx(\"p\", null, \"But Reactive Programming is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"not only about\"), \" tackling the complicated job of handling \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"asynchronicity\"), \". There are other amazing advantages\\nthat this paradigm facilitates:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"A mental framework\"), \" to use your \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Event-driven_programming\",\n    target: \"_blank\",\n    title: \"Event-driven programming - Wikipedia\"\n  }, \"event-driven programming\"), \" skills in\\na \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"more data-oriented\"), \". Event-driven programming is only about programming user/system actions (e.g., mouse clicks), what if you could apply\\nthis same model not only to events but also to data (e.g., changing data X triggers a change to data Y).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Functional Programming & Immutability\"), \" - it's all about generating values to respond to a change. Changes trigger\\nthe creation of new values, naturally promoting \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Immutable_object\",\n    target: \"_blank\",\n    title: \"Immutable object - Wikipedia\"\n  }, \"immutability\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Single Code Styling\"), \" - you'll be exposed to a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"higher abstraction level\"), \" of cofing where handling tasks with Promises\\nor other asynchronous mechanisms can look like any other code that does not involve asynchronicity.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"State Management\"), \" - by following the reactive way, state updates tend to be sequential, we'll often find a solution that will help\\nus eliminate some annoying global variables hanging around our code. This will become clear once we jump into our small application\\nthat I'll present later on in this series.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Performance\"), \" - from \", mdx(\"a\", {\n    href: \"https://jaxenter.com/the-fight-for-performance-157515.html\",\n    target: \"_blank\",\n    title: \"The fight for performance \\u2013 Is reactive programming the right approach? - JAXenter\"\n  }, \"\\\"The fight for performance \\u2013 Is reactive programming the right approach?\\\"\"), \", there's a\\ndiscussion around how Reactive Programming can overcome some potential bottlenecks caused by native threads in\\nJava. In \", mdx(\"a\", {\n    href: \"http://lup.lub.lu.se/luur/download?func=downloadFile&recordOId=8932146&fileOId=8932147\",\n    target: \"_blank\",\n    title: \"Reactive programming and its effect on performance and the development process, Gustav Hochbergs\"\n  }, \"this master's thesis\"), \", the\\nauthor boards on a journey to compare a real application's performance when migrated over to an approach based on Reactive Programming\\nlibraries. In short, it seems that there are no conclusive results in regards to CPU or memory usage when comparing a synchronous\\napproach with a Reactive approach, but one thing stands out. The reactive approach seems to keep a good throughput under high load, where\\nthere's the need for processing data in super short time intervals (5ms), here is where the Reactive approach shines the most.\")), mdx(\"p\", null, \"There's one thing I need to mention, though, which is what most of the above sources where I've been reading about Reactive Programming\\nhave in common. Although we've seen Reactive Programming taking the higher ground in several aspects compared to traditional paradigms, its\\ncomplexity seems to be one of the main barriers to its adoption. Reactive \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"implementations are said to have a higher maintenance cost compared\"), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"to a conventional programming style\"), \". I can't argue this, the learning curve is steep, but once you pass that the rewards are noteworthy and\\nthings that in other times you would think of impossible or had to implement become so much easier.\"), mdx(\"p\", null, \"If you feel like taking a shot at Reactive Programming, I'll gladly guide you through it!\"), mdx(\"br\", null), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Part 1 - Why You Should Consider Reactive Programming\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/reactive-programming-fundamentals\",\n    target: \"_blank\",\n    title: \"Fundamentals of Reactive Programming | goodguydaniel.com\"\n  }, \"Part 2 - Fundamentals of Reactive Programming\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/hands-on-reactive-programming-rxjs\",\n    target: \"_blank\",\n    title: \"Hands-on Reactive Programming with RxJS | goodguydaniel.com\"\n  }, \"Part 3 - Hands-on Reactive Programming with RxJS\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/reactive-rxjs-pros-cons\",\n    target: \"_blank\",\n    title: \"Reactive Programming: The Good and the Bad | goodguydaniel.com\"\n  }, \"Part 4 - Reactive Programming: The Good and the Bad\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/awesome-reactive\",\n    target: \"_blank\",\n    title: \"Awesome RxJS and Reactive Programming Resources | goodguydaniel.com\"\n  }, \"Part 5 - Awesome RxJS and Reactive Programming Resources\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Part 1 - Why You Should Consider Reactive Programming In the first part of my  series on Reactive Programming , I\nwant to answer why you…","timeToRead":5,"banner":null,"parent":{"__typename":"Mdx","frontmatter":{"subtitle":"Reactive Series - Part 1"}}}},"pageContext":{"slug":"/blog/why-reactive-programming","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}