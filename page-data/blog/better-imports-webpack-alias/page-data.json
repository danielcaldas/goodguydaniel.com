{"componentChunkName":"component---src-lekoarts-gatsby-theme-minimal-blog-core-templates-post-query-tsx","path":"/blog/better-imports-webpack-alias","result":{"data":{"post":{"__typename":"MdxPost","slug":"/blog/better-imports-webpack-alias","title":"Better imports with webpack resolve.alias","date":"10.01.2020","tags":[{"name":"Webpack","slug":"webpack"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Better imports with webpack resolve.alias\",\n  \"date\": \"2020-01-10T00:00:00.000Z\",\n  \"slug\": \"/blog/better-imports-webpack-alias\",\n  \"tags\": [\"Webpack\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ScrollToTopButton, {\n    mdxType: \"ScrollToTopButton\"\n  }), mdx(\"p\", null, \"I want to write a short article where once more I emphasize one of the superpowers of \", mdx(\"a\", {\n    href: \"https://webpack.js.org/\",\n    target: \"_blank\",\n    title: \"bundle your scripts\"\n  }, \"webpack\"), \".\"), mdx(\"p\", null, \"Have you ever came across this in some of your project's codebase(s)?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"import { powerUtility } from \\\"../../../../common/utils\\\";\\n\")), mdx(\"p\", null, \"Wouldn't it be pleasing to refer to a top-level module/namespace in any place you need to import something?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"import { powerUtility } from \\\"@project-x-utils\\\";\\n\")), mdx(\"p\", null, \"With webpack, having something like that, it's very straightforward. Aliasing module names for shorter and clear import statements have considerable gains in terms of codebase discoverability, codebase navigation, and of course, general readability. Aliasing modules is especially helpful for large codebases organized in modules.\"), mdx(\"p\", null, \"Aliasing modules is as simple as using \", mdx(\"a\", {\n    href: \"https://webpack.js.org/configuration/resolve/\",\n    target: \"_blank\",\n    title: \"webpack options that change how modules are resolved\"\n  }, \"webpack \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Resolve\"), \" configurations\"), \", more precisely \", mdx(\"a\", {\n    href: \"https://webpack.js.org/configuration/resolve/#resolvealias\",\n    target: \"_blank\",\n    title: \"webpack aliases to import or require certain modules more easily\"\n  }, \"resolve.alias\"), \". To follow up on the previous example, here is how your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webpack.config.js\"), \" file should look like if you want to be able to import your \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"utils\"), \" module as displayed above.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const webpack = require(\\\"webpack\\\");\\n// ...\\n\\nconst options = {\\n  entry: {\\n    // ...\\n  },\\n  output: {\\n    // ...\\n  },\\n  module: {\\n    // ...\\n  },\\n  resolve: {\\n    alias: {\\n      // Note: 'src/common/utils' is the path to the module, in this case \\\"utils\\\"\\n      \\\"@project-x-utils\\\": path.resolve(__dirname, \\\"src/common/utils\\\"),\\n      // ...\\n    },\\n  },\\n  plugins: [\\n    // ...\\n  ],\\n};\\n\\nmodule.exports = options;\\n\")), mdx(\"p\", null, \"Now you can go ahead and remove all those 100 characters long relative imports at the beginning of your JavaScript files.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"I want to write a short article where once more I emphasize one of the superpowers of  webpack . Have you ever came across this in some ofâ€¦","timeToRead":1,"banner":null,"parent":{"__typename":"Mdx","frontmatter":{"subtitle":null}}}},"pageContext":{"slug":"/blog/better-imports-webpack-alias","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","318001574"]}