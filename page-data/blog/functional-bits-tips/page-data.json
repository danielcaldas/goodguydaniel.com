{"componentChunkName":"component---src-lekoarts-gatsby-theme-minimal-blog-core-templates-post-query-tsx","path":"/blog/functional-bits-tips","result":{"data":{"post":{"__typename":"MdxPost","slug":"/blog/functional-bits-tips","title":"Functional bits","date":"30.03.2020","tags":[{"name":"Functional Programming","slug":"functional-programming"},{"name":"JavaScript","slug":"java-script"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Functional bits\",\n  \"subtitle\": \"Towards a Functional Programming Style\",\n  \"date\": \"2020-03-30T00:00:00.000Z\",\n  \"slug\": \"/blog/functional-bits-tips\",\n  \"tags\": [\"Functional Programming\", \"JavaScript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ScrollToTopButton, {\n    mdxType: \"ScrollToTopButton\"\n  }), mdx(\"p\", null, \"Here are some of my top favorite personal utilities to make your programming style more functional. They increase the readability of my code and help me transforming those less pretty pieces of logic into something that I'm proud of and that I can confidently change by merely modifying a line of code (or maybe less).\"), mdx(\"h3\", {\n    \"id\": \"the-bits\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"The bits\", mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#the-bits\",\n    \"aria-label\": \"the bits permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"I list below a series of utilities together with a short background/motivation followed by an example where I demonstrate both the imperative and functional approaches, where the functional approach makes use of the respective utility. You can also find a rough implementation of the utility by the end of its section.\"), mdx(\"h4\", {\n    \"id\": \"tap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"tap\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#tap\",\n    \"aria-label\": \"tap permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"Inspired by the \", mdx(\"a\", {\n    href: \"https://rxjs-dev.firebaseapp.com/api/operators/tap\",\n    target: \"_blank\",\n    title: \"RxJS tap operator\"\n  }, \"RxJS tap operator\"), \". With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tap\"), \", you can perform non-intrusive side effects. By non-intrusive, I mean that you can leverage the power of a functional style of coding to perform a task, and simultaneously deliver a side effect (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \") within your approach. Let's have a look.\"), mdx(\"h5\", {\n    \"id\": \"imperative\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Imperative\", mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#imperative\",\n    \"aria-label\": \"imperative permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let agesSum = 0;\\nconst totalNumberOfUsers = users.length;\\n\\nfor (const user of users) {\\n  const birthdate = user.birthdate * 1000; // convert to milliseconds\\n  console.log(birthdate);\\n  const userAge = new Date().getFullYear() - new Date(birthdate).getFullYear();\\n  agesSum += userAge;\\n}\\n\\nconst meanAge = agesSum / totalNumberOfUsers;\\n\\nconsole.log(`Users are in average ${meanAge} years old.`);\\n\")), mdx(\"br\", null), mdx(\"h5\", {\n    \"id\": \"functional-with-tap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Functional with \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"tap\"), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#functional-with-tap\",\n    \"aria-label\": \"functional with tap permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const sum = (arr) => arr.reduce((s, n) => s + n, 0);\\nconst mean = (arr) => sum(arr) / arr.length;\\nconst meanAge = mean(\\n  users\\n    .map((user) => user.birthdate * 1000) // convert to milliseconds\\n    .tap((birthdates) => console.log(birthdates)) // logs array of birthdates\\n    .map((birthdate) => new Date().getFullYear() - new Date(birthdate).getFullYear()),\\n);\\n\\nconsole.log(`Users are in average ${meanAge} years old.`);\\n\")), mdx(\"p\", null, \"I give you that right now, it's far more understandable how you would log something in between your imperative approach. You can inspect each age individually as the code progresses. But as you can see in the functional approach analyzing the birthdates at a particular stage of your data transformations is also possible! Below the implementation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tap\"), \". Warning, this approach extends the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Array.prototype\"), \", use at your own risk.\"), mdx(\"h5\", {\n    \"id\": \"implementing-tap\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Implementing \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"tap\"), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#implementing-tap\",\n    \"aria-label\": \"implementing tap permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"Object.defineProperty(Array.prototype, \\\"tap\\\", {\\n  value: function (fn) {\\n    fn(this);\\n    return this;\\n  },\\n  writable: true,\\n});\\n\")), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"and--or\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"and \", \"&\", \" or\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#and--or\",\n    \"aria-label\": \"and  or permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"Did it ever happen to you ending up with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statement that needs to be broken down into several LOC \", mdx(\"small\", null, \"(\", mdx(\"i\", null, \"Lines Of Code\"), \")\"), \" because it is too long, and the linter starts crying about it? There's an elegant solution for that, and it's pure composition, let me share it with you.\"), mdx(\"h5\", {\n    \"id\": \"imperative-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Imperative\", mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#imperative-1\",\n    \"aria-label\": \"imperative 1 permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const usersEligibleForSurvey = [];\\n\\nfor (const user of users) {\\n  const age = getAgeFromUnixTimestamp(user.birthdate);\\n\\n  if (user.gender === \\\"female\\\" && age < 33 && user.location.country === \\\"denmark\\\") {\\n    usersEligibleForSurvey.push(user);\\n  }\\n}\\n\")), mdx(\"br\", null), mdx(\"h5\", {\n    \"id\": \"functional-with-and\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Functional with \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"and\"), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#functional-with-and\",\n    \"aria-label\": \"functional with and permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const isFemale = (user) => user.gender === \\\"female\\\";\\nconst isBelowAge = (age) => (user) => getAgeFromUnixTimestamp(user.birthdate) < age;\\nconst isFromCountry = (country) => (user) => user.location.country === country;\\nconst isUserEligibleForSurvey = and(isFemale, isBelowAge(33), isFromCountry(\\\"denmark\\\"));\\n\\nconst usersEligibleForSurvey = users.filter(isUserEligibleForSurvey);\\n\")), mdx(\"p\", null, \"Instead of a single if statement, you now have a reusable function. More than that, you can easily plugin and out any criteria to exclude users from the survey! Let's say you had a very complex function that, given a specific user would check some rules against the postcode to exclude certain areas of the country. Given you have that function, append it into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"and\"), \" arguments. That's all! \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isUserEligibleForSurvey\"), \" is now checking for the postcode as well, you're good to go.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"and\"), \" is an excellent example of why we describe this kind of approach as declarative programming, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you're expressing the logic without describing its control flow\"), \".\"), mdx(\"br\", null), mdx(\"h5\", {\n    \"id\": \"implementing-and\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Implementing \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"and\"), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#implementing-and\",\n    \"aria-label\": \"implementing and permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function and(...fns) {\\n  const n = fns.length;\\n\\n  return (...args) => {\\n    for (let i = 0; i < n; i++) {\\n      const fn = fns[i];\\n      const result = fn(...args);\\n      if (!result) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  };\\n}\\n\")), mdx(\"p\", null, \"More functional, less efficient, since it executes all the predicates.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const and = (...fns) => (...args) => fns.reduce((prev, fn) => prev && fn(...args));\\n\")), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"select--drop\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"select \", \"&\", \" drop\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#select--drop\",\n    \"aria-label\": \"select  drop permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"RxJS has \", mdx(\"a\", {\n    href: \"https://rxjs-dev.firebaseapp.com/api/operators/pluck\",\n    target: \"_blank\",\n    title: \"RxJS operators, pluck\"\n  }, \"pluck\"), \", lodash has \", mdx(\"a\", {\n    href: \"https://rxjs-dev.firebaseapp.com/api/operators/pluck\",\n    target: \"_blank\",\n    title: \"Lodash pick\"\n  }, \"pick\"), \". I find \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" a more concise and name. Projecting properties from objects is a prevalent task. The fact that JavaScript has destructuring built-in is a live proof of that. You could use destructuring to project properties; \", mdx(\"a\", {\n    href: \"https://goodguydaniel.com/blog/destructuring-not-so-good-parts/\",\n    target: \"_blank\",\n    title: \"Destructuring in JavaScript: the not so good parts\"\n  }, \"it's often more tedious, and it's not suitable for every occasion\"), \" to use within a chain of operations.\"), mdx(\"h5\", {\n    \"id\": \"imperative-2\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Imperative\", mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#imperative-2\",\n    \"aria-label\": \"imperative 2 permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"let countries = new Set();\\n\\nfor (const user of users) {\\n  countries.add(user.location.country);\\n}\\n\\nconsole.log(Array.from(countries).join(\\\", \\\"));\\n\")), mdx(\"br\", null), mdx(\"h5\", {\n    \"id\": \"functional-with-select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Functional with \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"select\"), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#functional-with-select\",\n    \"aria-label\": \"functional with select permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const countries = new Set(users.map(select(\\\"location.country\\\")));\\n\\nconsole.log(Array.from(countries).join(\\\", \\\"));\\n\")), mdx(\"p\", null, \"In the functional approach, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \" extracts from each user the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"country\"), \" field located within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"location\"), \" object.\"), mdx(\"p\", null, \"Again, with the functional approach, we shift towards a more declarative style.\\nThere's also an \\\"opposite\\\" of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"select\"), \", which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drop\"), \". In short, instead of picking up the properties of an object, you declare which properties you want to drop.\"), mdx(\"h5\", {\n    \"id\": \"implementing-select\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Implementing \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"select\"), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#implementing-select\",\n    \"aria-label\": \"implementing select permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// something similar to lodash/get\\nfunction get(o, query, defaultValue = undefined) {\\n  if (!query) return defaultValue;\\n  const path = query.split(\\\".\\\");\\n  let pointer = o;\\n\\n  for (const k of path) {\\n    pointer = pointer[k];\\n    if (!pointer) return defaultValue;\\n  }\\n\\n  return pointer;\\n}\\n\\n/**\\n * When there's only a single property in `keys` the value is not wrapped in an object e.g.\\n * > const city = select('location.city')(users[0])\\n * > console.log(city)\\n * > 'staphorst'\\n *\\n * Nested paths are flatten at the top level e.g.\\n * > const cityCountry = select('location.city', 'location.country')(users[0])\\n * > console.log(cityCountry)\\n * > { 'location.city': 'staphorst', 'location.country': 'netherlands' }\\n */\\nconst select = (...keys) => (o) =>\\n  keys.length === 1\\n    ? get(o, keys[0])\\n    : keys.reduce((acc, k) => {\\n        acc[k] = get(o, k);\\n        return acc;\\n      }, {});\\n\")), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"pipe\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"pipe\", mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"#pipe\",\n    \"aria-label\": \"pipe permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe\"), \" would be something like \", mdx(\"a\", {\n    href: \"https://lodash.com/docs/4.17.15#flow\",\n    target: \"_blank\",\n    title: \"lodash flow\"\n  }, \"lodash/flow\"), \" where you can take \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"N\"), \" functions where each performs a unique task and combine them in chain where data flows from left to right. The output of a function within the pipe is the input to the next one (and so on). It's good to use something like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe\"), \" when you need to perform a series of data transformations on a given input. Let's look at the following example, where we want to format our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"users\"), \" data in a way that is friendly to be consumed by the UI, but first, there are some requirements that need to be met in terms of the shape of each user Object individually.\\nThe goal is to render a table with the name (first name + last name), age, and country (with the first character capitalized) so that the Marketing department of the company \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"X\"), \" can have a look at their users' data nicely formatted.\"), mdx(\"p\", null, \"First let me introduce some shared utilities to do some work on our user Object, we use them in both the imperative and functional approach for ease of comparison.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// returns number representable of the user age\\nfunction getUserAge(user) {\\n  return new Date().getFullYear() - new Date(user.birthdate * 1000).getFullYear();\\n}\\n// returns the name of the user's country (capitalized)\\nfunction formatCountry(user) {\\n  let tmp = Array.from(user.location.country);\\n  tmp[0] = tmp[0].toUpperCase();\\n  return tmp.join(\\\"\\\");\\n}\\n// puts together first & last name in the same string\\nfunction getFirstAndLastName(user) {\\n  return `${user.first_name} ${user.last_name}`;\\n}\\n\")), mdx(\"p\", null, \"Now, let's dive in and translate those requirements into code.\"), mdx(\"h5\", {\n    \"id\": \"imperative-3\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Imperative\", mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#imperative-3\",\n    \"aria-label\": \"imperative 3 permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const formattedUsers = [];\\n\\nfor (const user of users) {\\n  const formattedUser = {\\n    name: getFirstAndLastName(user),\\n    age: getUserAge(user),\\n    country: formatCountry(user),\\n  };\\n\\n  formattedUsers.push(formattedUser);\\n}\\n\\nconsole.log(formattedUsers); // data ready for the UI!\\n\")), mdx(\"br\", null), mdx(\"h5\", {\n    \"id\": \"functional-with-pipe\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Functional with \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"pipe\"), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#functional-with-pipe\",\n    \"aria-label\": \"functional with pipe permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const formatUser = pipe(\\n  (user) => ({ ...user, name: getFirstAndLastName(user) }),\\n  (user) => ({ ...user, age: getUserAge(user) }),\\n  (user) => ({ ...user, country: formatCountry(user) }),\\n  select(\\\"name\\\", \\\"age\\\", \\\"country\\\"),\\n);\\nconst formattedUsers = users.map(formatUser);\\n\\nconsole.log(formattedUsers); // data ready for the UI!\\n\")), mdx(\"small\", null, \"The only small *trick* here is that I had to feed the initial \", mdx(\"code\", null, \"user\"), \" down through the \", mdx(\"code\", null, \"pipe\"), \", and we incrementally append new data properties to a newly created user Object (original \", mdx(\"code\", null, \"user\"), \" is not mutated).\"), mdx(\"p\", null, \"As you can see, using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe\"), \", you have a clear separation of concerns in terms of what transformations run against your input, again at any point in time, you can plug in or out a new transformation function from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pipe\"), \" with minimal effort.\"), mdx(\"h5\", {\n    \"id\": \"implementing-pipe\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Implementing \", mdx(\"inlineCode\", {\n    parentName: \"h5\"\n  }, \"pipe\"), mdx(\"a\", _extends({\n    parentName: \"h5\"\n  }, {\n    \"href\": \"#implementing-pipe\",\n    \"aria-label\": \"implementing pipe permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const pipe = (...fns) => (...args) => fns.reduce((prev, fn) => fn(prev), ...args);\\n\")), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"takeaways\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Takeaways\", mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#takeaways\",\n    \"aria-label\": \"takeaways permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"style\": {\n      \"paddingLeft\": \"12px\"\n    },\n    \"width\": \"28\",\n    \"height\": \"16\",\n    \"fill\": \"#9f7aea\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"Web applications are complex, meaning your code becomes inherently more complicated. Functional constructs do the trick for me when it comes to rearranging my logic into a compact implementation that may read like plain English. But besides a potential big win on \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"readability\"), \" there are other advantageous things in the package:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Functions are more natural to reason\"), \" - \\\"divide and conquer\\\" one of the most underrated statements that put you on the road to \", mdx(\"a\", {\n    href: \"http://cleancoder.com/products\",\n    target: \"_blank\",\n    rel: \"nofollow\",\n    title: \"Uncle Bob Martin\"\n  }, \"clean code\"), \". Your functions will execute one task and one task only, and do it well. You name the smaller functions of your program with intent.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Code resilience\"), \" - you'll notice that your code becomes more \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"bulletproof\"), \". Splitting your code into smaller functions and compose them at a higher level of your implementation will make your system more \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"robust\"), \", more \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"comfortable to test\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"achieving the same with less LOC\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Composability\"), \" - your code becomes more composable, allowing you to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"plug&play functions to promptly tweak your implementation\"), \". You'll pull existing functions together to compose them into more intricate ones that will get the job done and still read comfortably.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Performance? \", mdx(\"a\", {\n    href: \"https://www.youtube.com/watch?v=BN1WwnEDWAM\",\n    target: \"_blank\",\n    title: \"The Clash - Should I Stay or Should I Go (Official Audio)\"\n  }, \"\\\"Should I stay or Should I Go\\\"\"), \"?\"), \" - From the example above, when implementing the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"and\"), \" utility, we saw that the functional approach is not able to return earlier as the imperative approach did. There's no way to early break from functional constructs such as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".map\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".reduce\"), \" (which is a good thing! no, side-effects allowed!). Don't trick yourself in thinking that such detail dictates overall better performance for an imperative approach. Sometimes the benefits of making it \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"readable\"), \" and composable through more trivial functions will bring you, your team, and your product far more significant advantages than speeding up the JavaScript execution by a few fractions of a millisecond.\")), mdx(\"p\", null, \"On the \\\"not so good side\\\" of things, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the biggest challenge this coding style faces today is debugability\"), \". \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"Oh, but they say also debugging becomes easier!\\\"\"), \" I don't think so, but let me clarify what I mean by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"debugability\\\"\"), \". One on hand \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"code is more natural to track because there's much structure to it, yes\"), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"But\"), \" on the other hand, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"diving into specific detail of the implementation becomes hard\"), \" because you kind of need to perform \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"reverse engineering\\\" of the compact code\"), \" to perform a log in the console or other adding a breakpoint (use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tap\"), \", he's your friend there!).\"), mdx(\"p\", null, \"I think these tools are good ones to spark your interest in a more functional coding style and maybe if you see fit dive into libraries like \", mdx(\"a\", {\n    href: \"https://github.com/lodash/lodash/wiki/FP-Guide\",\n    target: \"_blank\",\n    title: \"lodash FP guide on GitHub\"\n  }, \"lodash/fp\"), \".\"), mdx(\"p\", null, \"Another tip that I would like to drop is that when adopting a functional architecture \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"it's good to keep in mind some good practices when it comes to design functions\"), \". I found \", mdx(\"a\", {\n    href: \"http://cleancoder.com/products\",\n    target: \"_blank\",\n    rel: \"nofollow\",\n    title: \"Uncle Bob Martin\"\n  }, \"Clean Code\"), \" (by \", mdx(\"a\", {\n    href: \"http://www.cleancoder.com/products\",\n    target: \"_blank\",\n    title: \"Uncle Bob Martin | cleancoder.com\"\n  }, \"Uncle Bob Martin\"), \") to be an awesome resource that helped me laying down some ground rules when it comes to designing function APIs that are clean and scalable.\"), mdx(\"p\", null, \"Do you find these few bits of the functional world beneficial? Give them a try!\"), mdx(\"p\", null, \"If you fell like going through the above examples by executing them to get a better understanding of how they're working, you can use the below dataset as input.\"), mdx(Accordion, {\n    summary: \"Dataset used for code examples\",\n    mdxType: \"Accordion\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const users = [\\n  {\\n    email: \\\"melany.wijngaard@example.com\\\",\\n    gender: \\\"female\\\",\\n    phone_number: \\\"(727)-033-9347\\\",\\n    birthdate: 608022796,\\n    location: {\\n      street: \\\"2431 predikherenkerkhof\\\",\\n      city: \\\"staphorst\\\",\\n      state: \\\"gelderland\\\",\\n      postcode: 64265,\\n    },\\n    username: \\\"bigpeacock217\\\",\\n    password: \\\"eagle\\\",\\n    first_name: \\\"melany\\\",\\n    last_name: \\\"wijngaard\\\",\\n    title: \\\"miss\\\",\\n  },\\n  {\\n    email: \\\"nanna.pedersen@example.com\\\",\\n    gender: \\\"female\\\",\\n    phone_number: \\\"43672992\\\",\\n    birthdate: 591428535,\\n    location: {\\n      street: \\\"2177 f\\xE5borgvej\\\",\\n      city: \\\"aarhus\\\",\\n      state: \\\"syddanmark\\\",\\n      postcode: 87547,\\n    },\\n    username: \\\"purpleduck599\\\",\\n    password: \\\"davids\\\",\\n    first_name: \\\"nanna\\\",\\n    last_name: \\\"pedersen\\\",\\n    title: \\\"ms\\\",\\n  },\\n  {\\n    email: \\\"amelia.mercier@example.com\\\",\\n    gender: \\\"female\\\",\\n    phone_number: \\\"(168)-747-5950\\\",\\n    birthdate: 1132298571,\\n    location: {\\n      street: \\\"7454 rue duquesne\\\",\\n      city: \\\"echandens-denges\\\",\\n      state: \\\"vaud\\\",\\n      postcode: 3811,\\n    },\\n    username: \\\"whitefrog218\\\",\\n    password: \\\"forest\\\",\\n    first_name: \\\"amelia\\\",\\n    last_name: \\\"mercier\\\",\\n    title: \\\"madame\\\",\\n  },\\n];\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Here are some of my top favorite personal utilities to make your programming style more functional. They increase the readability of my code…","timeToRead":5,"banner":null,"parent":{"__typename":"Mdx","frontmatter":{"subtitle":"Towards a Functional Programming Style"}}}},"pageContext":{"slug":"/blog/functional-bits-tips","formatString":"DD.MM.YYYY"}}}